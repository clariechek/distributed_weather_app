Instructions for terminal testing of the following tests. Insert one of the following in [testFileName] to run the test.
- SinglePutTest
- PutGetTest

1. To compile the test run the following command:

2. To run the test run the following command:
java -cp .:java-json.jar [testFileName].java > output.txt

This will save the output of the test to the output.txt file.

3. To compare the results of the test with expected results, run the following command:
diff -q output.txt [testFileName]ExpectedOutput.txt

If the terminal prints "Files output.txt and [testFileName]ExpectedOutput.txt differ", then the test has failed.
Otherwise, if nothing is printed, the test has passed.


Instructions for manual testing.
To run these tests, ensure that you have compiled the code following the Compilation instructions.

Manual Test 1: Multiple Put Test
- In the root directory, delete the following files if they exist: 
(This is because the auto-delete only works when the server shutdowns normally. During testing we may interrupt the server using CTRL-C, hence these files may not be deleted.)
    - cs#_p#.json files (where # is a number)
    - LAMPORT_AGGREGATION_SERVER.txt
    - PID_COUNTER.txt
    - weather.json

- To start the aggregation server, run the following command:
java -cp .:java-json.jar:DataUtil:LogUtil:RequestInformation.java:LamportClock.java:Response.java:Listener.java:Handler.java AggregationServer.java 4567

- While the aggregation server is running, start a content server with the following command:
java -cp .:java-json.jar:LamportClock.java:WeatherEntry.java ContentServer.java http://localhost:4567 1 cs1_1.txt

- In the content server terminal, you should see the output:
[insert expected output]

- Open the weather.json file in the root directory. If the file is not formatted, right-click it and select "Format Document". You should see the following:
[insert expected output]

- Then start another content server with the following command:
java -cp .:java-json.jar:LamportClock.java:WeatherEntry.java ContentServer.java http://localhost:4567 2 cs2_1.txt

- In the weather.json file, you should see the following:
[insert expected output]

- Then start another content server with the following command:
java -cp .:java-json.jar:LamportClock.java:WeatherEntry.java ContentServer.java http://localhost:4567 1 cs1_2.txt

- In the weather.json file, you should see the following:
[insert expected output]


Manual Test 2: Single Get Test
- In the root directory, delete the following files if they exist: 
(This is because the auto-delete only works when the server shutdowns normally. During testing we may interrupt the server using CTRL-C, hence these files may not be deleted.)
    - cs#_p#.json files (where # is a number)
    - LAMPORT_AGGREGATION_SERVER.txt
    - PID_COUNTER.txt
    - weather.json
- To start the aggregation server, run the following command:
java -cp .:java-json.jar:DataUtil:LogUtil:RequestInformation.java:LamportClock.java:Response.java:Listener.java:Handler.java AggregationServer.java 4567
- To start the GETClient, run the following command in another terminal:
java -cp .:java-json.jar:LamportClock.java GETClient.java http://localhost:4567 2
- You should see the following output in the GETClient terminal:
New PID Allocated: 1
Connected to localhost on port 4567
HTTP/1.1 404 Not Found
Is content length 0: true
Content-Length: 0
Connnection: close



Data for station ID 2 is not found in database.


Manual Test 3: Put Get Put Get Test
- In the root directory, delete the following files if they exist: 
(This is because the auto-delete only works when the server shutdowns normally. During testing we may interrupt the server using CTRL-C, hence these files may not be deleted.)
    - cs#_p#.json files (where # is a number)
    - LAMPORT_AGGREGATION_SERVER.txt
    - PID_COUNTER.txt
    - weather.json

- To start the aggregation server, run the following command:
java -cp .:java-json.jar:DataUtil:LogUtil:RequestInformation.java:LamportClock.java:Response.java:Listener.java:Handler.java AggregationServer.java 4567

- While the aggregation server is running, start a content server with the following command:
java -cp .:java-json.jar:LamportClock.java:WeatherEntry.java ContentServer.java http://localhost:4567 1 cs1_1.txt

- In the content server terminal, you should see the output:
[insert expected output]

- To start the GETClient, run the following command in another terminal:
java -cp .:java-json.jar:LamportClock.java GETClient.java http://localhost:4567 1

- You should see the following output in the GETClient terminal:

- Start the content server again with the following command:
java -cp .:java-json.jar:LamportClock.java:WeatherEntry.java ContentServer.java http://localhost:4567 1 cs1_2.txt

- Start the GETClient again by running the following command:
java -cp .:java-json.jar:LamportClock.java GETClient.java http://localhost:4567 1

- You should see the following output in the GETClient terminal:



Manual Test 4: Aggregation Server auto delete after 30s Test


Manual Test 5: Aggregation Server restart after crash Test
